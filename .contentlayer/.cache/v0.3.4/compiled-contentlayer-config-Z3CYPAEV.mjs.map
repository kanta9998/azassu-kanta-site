{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from 'contentlayer/source-files'\n\nexport const Author = defineDocumentType(() => ({\n  name: 'Author',\n  filePathPattern: `authors/**/*.md`,\n  fields: {\n    name: {\n      type: 'string',\n      description: 'The name of the author',\n      required: true,\n    },\n    avatar: {\n      type: 'string',\n      description: 'The avatar of the author',\n      required: false,\n    },\n    occupation: {\n      type: 'string',\n      description: 'The occupation of the author',\n      required: false,\n    },\n    company: {\n      type: 'string',\n      description: 'The company of the author',\n      required: false,\n    },\n    email: {\n      type: 'string',\n      description: 'The email of the author',\n      required: false,\n    },\n    twitter: {\n      type: 'string',\n      description: 'The twitter handle of the author',\n      required: false,\n    },\n    linkedin: {\n      type: 'string',\n      description: 'The linkedin profile of the author',\n      required: false,\n    },\n    github: {\n      type: 'string',\n      description: 'The github profile of the author',\n      required: false,\n    },\n    tiktok: {\n      type: 'string',\n      description: 'The TikTok profile of the author',\n      required: false,\n    },\n    youtube: {\n      type: 'string',\n      description: 'The YouTube channel of the author',\n      required: false,\n    },\n    instagram: {\n      type: 'string',\n      description: 'The Instagram profile of the author',\n      required: false,\n    },\n    layout: {\n      type: 'string',\n      description: 'The layout of the author page',\n      required: false,\n    },\n  },\n  computedFields: {\n    slug: {\n      type: 'string',\n      resolve: (doc) => doc._raw.flattenedPath.replace(/^authors\\//, ''),\n    },\n  },\n}))\n\nexport const Portfolio = defineDocumentType(() => ({\n  name: 'Portfolio',\n  filePathPattern: `portfolio/**/*.mdx`,\n  contentType: 'mdx',\n  fields: {\n    title: {\n      type: 'string',\n      description: 'The title of the portfolio item',\n      required: true,\n    },\n    date: {\n      type: 'date',\n      description: 'The date of the portfolio item',\n      required: true,\n    },\n    tags: {\n      type: 'list',\n      of: { type: 'string' },\n      description: 'Tags for the portfolio item',\n      required: false,\n    },\n    draft: {\n      type: 'boolean',\n      description: 'Whether the portfolio item is a draft',\n      required: false,\n    },\n    summary: {\n      type: 'string',\n      description: 'A summary of the portfolio item',\n      required: false,\n    },\n    images: {\n      type: 'list',\n      of: { type: 'string' },\n      description: 'Images for the portfolio item',\n      required: false,\n    },\n    client: {\n      type: 'string',\n      description: 'The client for the portfolio item',\n      required: false,\n    },\n    category: {\n      type: 'string',\n      description: 'The category of the portfolio item',\n      required: false,\n    },\n  },\n  computedFields: {\n    url: {\n      type: 'string',\n      resolve: (doc) => `/portfolio/${doc._raw.flattenedPath.replace(/^portfolio\\//, '')}`,\n    },\n    slug: {\n      type: 'string',\n      resolve: (doc) => doc._raw.flattenedPath.replace(/^portfolio\\//, ''),\n    },\n  },\n}))\n\nexport default makeSource({\n  contentDirPath: 'data',\n  documentTypes: [Author, Portfolio],\n  mdx: {\n    remarkPlugins: [],\n    rehypePlugins: [],\n  },\n}) "],
  "mappings": "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",
  "names": []
}
